import cv2
import mediapipe as mp

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Setup hand detection model
hands = mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=2,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5
)

# Start webcam
cap = cv2.VideoCapture(0)

def is_fist(landmarks):
    """
    Simple gesture recognition: check if fingers are curled (closed fist)
    Uses landmark index 8 (tip of index finger) and 6 (lower joint)
    """
    # Check if tip of index finger is below its PIP joint (folded)
    if landmarks[8].y > landmarks[6].y:
        return True
    return False

while cap.isOpened():
    success, image = cap.read()
    if not success:
        print("Ignoring empty camera frame.")
        continue

    # Flip the image horizontally for a mirror effect
    image = cv2.flip(image, 1)
    
    # Convert to RGB
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Process the image and detect hands
    result = hands.process(image_rgb)

    # Draw hand landmarks and detect gesture
    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            # Draw the landmarks on the image
            mp_drawing.draw_landmarks(
                image, hand_landmarks, mp_hands.HAND_CONNECTIONS
            )

            # Gesture recognition (e.g., open hand or closed fist)
            if is_fist(hand_landmarks.landmark):
                cv2.putText(image, "Fist Detected - STOP", (10, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
            else:
                cv2.putText(image, "Open Hand - GO", (10, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3)

    # Show the output
    cv2.imshow('Hand Tracker', image)

    # Exit on pressing 'q'
    if cv2.waitKey(5) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
